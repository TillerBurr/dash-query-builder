name: Release

on:
    push:
        tags:
            - '*.*.*'

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'
            - uses: actions/setup-node@v3
              with:
                  node-version: 16
            - uses: pnpm/action-setup@v2
              with:
                  version: 7
            - name: Cache pnpm dependencies
              uses: actions/cache@v3
              id: cache-pnpm
              with:
                  path: ./node_modules
                  key: modules-${{ hashFiles('package-lock.json') }}
            - name: Install pnpm Dependencies
              run: pnpm install
              if: steps.cache-pnpm.outputs.cache-hit != 'true'
            - name: Cache poetry
              id: cached-poetry
              uses: actions/cache@v3
              with:
                  path: ~/.local
                  key: poetry-cache-${{ runner.os }}-3.11
            - name: Install Poetry
              if: steps.cached-poetry.outputs.cache-hit != 'true'
              uses: snok/install-poetry@v1
              with:
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true
            - name: Cache poetry
              id: cached-poetry-dependencies
              uses: actions/cache@v3
              with:
                  path: .venv
                  key: poetry-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
            - run: poetry --version
            - name: Install Dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              run: poetry install
            - name: Build project
              run: |
                  pnpm run build:js
                  poetry run dash-generate-components ./src/lib/components dash_query_builder --r-prefix 'R' --jl-prefix ''

            - name: Upload project
              uses: actions/upload-artifact@v3
              with:
                  name: dash_query_builder
                  path: dash_query_builder
    # Run Tests Here
    # test:
    #     name: Run Tests
    #     needs: build
    #     runs-on: ubuntu-latest
    #     strategy:
    #         matrix:
    #             python-version: ['3.8', '3.9', '3.10', '3.11']
    #     steps:
    #         - name: Checkout code
    #           uses: actions/checkout@v3
    #         - name: Download artifact
    #           uses: actions/download-artifact@v3
    #           with:
    #               name: dash_query_builder
    #               path: dash_query_builder

    #         - name: Set up Python
    #           uses: actions/setup-python@v4
    #           with:
    #               python-version: ${{matrix.python-version}}
    #         - uses: actions/setup-node@v3
    #           with:
    #               node-version: 16
    #         - name: Cache poetry
    #           id: cached-poetry
    #           uses: actions/cache@v3
    #           with:
    #               path: ~/.local
    #               key: poetry-cache-${{ runner.os }}-${{ matrix.python-version}}
    #         - name: Install Poetry
    #           if: steps.cached-poetry.outputs.cache-hit != 'true'
    #           uses: snok/install-poetry@v1
    #         - name: Cache poetry
    #           id: cached-poetry-dependencies
    #           uses: actions/cache@v3
    #           with:
    #               path: .venv
    #               key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    #         - run: poetry --version
    #         - name: Install Dependencies
    #           if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    #           run: poetry install
    publish:
        name: Publish to PyPI
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            - name: Download artifact
              uses: actions/download-artifact@v3
              with:
                  name: dash_query_builder
                  path: dash_query_builder

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'
            - name: Cache poetry
              id: cached-poetry
              uses: actions/cache@v3
              with:
                  path: ~/.local
                  key: poetry-cache-${{ runner.os }}-3.11
            - name: Install Poetry
              if: steps.cached-poetry.outputs.cache-hit != 'true'
              uses: snok/install-poetry@v1
              with:
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true
            - name: Cache poetry
              id: cached-poetry-dependencies
              uses: actions/cache@v3
              with:
                  path: .venv
                  key: poetry-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
            - run: poetry --version
            - name: Install Dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              run: poetry install
            - name: Build project and publish
              env:
                  POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
              run: |
                  poetry build
                  poetry publish
            - name: Create Release
              uses: ncipollo/release-action@v1
              with:
                  artifacts: 'dist/*'
                  token: ${{ secrets.GITHUB_TOKEN }}
                  draft: false
                  prerelease: steps.check-version.outputs.prerelease == 'true'
